{"version":3,"sources":["item.service.ts"],"names":["core_1","require","http_1","Observable_1","ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","res","add","item","post","JSON","stringify","getRequestOptions","update","Id","put","delete","RequestOptions","headers","Headers","Content-Type","error","console","Observable","throw","__decorate","Injectable","Http","exports"],"mappings":"8pBAAA,IAAAA,QAAAC,QAAA,iBACAC,OAAAD,QAAA,iBACAE,aAAAF,QAAA,mBAIaG,YAAW,WACpB,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,aA2EtB,MAxEIH,aAAAI,UAAAC,UAAA,SAAUC,KACN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAU,cAAA,SAAcR,KACV,GAAIC,KAAML,KAAKC,QAAU,gBAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAW,UAAA,SAAUT,KACN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAI,IAAA,SAAIQ,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIV,KAAML,KAAKC,QAAUa,EACzB,OAAOd,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SACrBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAe,IAAA,SAAIC,MACA,GAAIb,KAAML,KAAKC,OACf,OAAOD,MAAKD,KAAKoB,KAAKd,IAAKe,KAAKC,UAAUH,MAAOlB,KAAKsB,qBACjDf,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAqB,OAAA,SAAOL,MACH,GAAIb,KAAML,KAAKC,QAAUiB,KAAKM,EAC9B,OAAOxB,MAAKD,KAAK0B,IAAIpB,IAAKe,KAAKC,UAAUH,MAAOlB,KAAKsB,qBAChDf,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAwB,OAAA,SAAOZ,IACH,GAAIT,KAAML,KAAKC,QAAUa,EACzB,OAAOd,MAAKD,KAAK2B,OAAOrB,KACnBK,MAAMV,KAAKW,cAIZb,YAAAI,UAAAoB,kBAAR,WACI,MAAO,IAAI1B,QAAA+B,gBACPC,QAAS,GAAIhC,QAAAiC,SACTC,eAAgB,wBAKpBhC,YAAAI,UAAAS,YAAR,SAAoBoB,OAGhB,MADAC,SAAQD,MAAMA,OACPlC,aAAAoC,WAAWC,MAAMH,MAAMtB,OAAOsB,OAAS,iBAEtDjC,cA9EaA,aAAWqC,YADvBzC,OAAA0C,6CAE6BxC,OAAAyC,QADjBvC,aAAAwC,QAAAxC,YAAAA","file":"item.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Http, Response, Headers, RequestOptions} from \"@angular/http\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Item} from \"./item\";\n\n@Injectable()\nexport class ItemService {\n    constructor(private http: Http) { }\n\n    private baseUrl = \"api/items/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.\n    getLatest(num?: number) {\n        var url = this.baseUrl + \"GetLatest/\";\n        if (num != null) { url += num; }\n        return this.http.get(url)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [GET] /api/items/GetMostViewed/{n} Web API method to retrieve the most viewed items.\n    getMostViewed(num?: number) {\n        var url = this.baseUrl + \"GetMostViewed/\";\n        if (num != null) { url += num; }\n        return this.http.get(url)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [GET] /api/items/GetRandom/{n} Web API method to retrieve n random items.\n    getRandom(num?: number) {\n        var url = this.baseUrl + \"GetRandom/\";\n        if (num != null) { url += num; }\n        return this.http.get(url)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: number) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + id;\n        return this.http.get(url)\n            .map(res => <Item>res.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(item: Item) {\n        var url = this.baseUrl;\n        return this.http.post(url, JSON.stringify(item), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [PUT] /api/items/{id} Web API method to update an existing item.\n    update(item: Item) {\n        var url = this.baseUrl + item.Id;\n        return this.http.put(url, JSON.stringify(item), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: number) {\n        var url = this.baseUrl + id;\n        return this.http.delete(url)\n            .catch(this.handleError);\n    }\n\n    // returns a viable RequestOptions object to handle Json requests\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}