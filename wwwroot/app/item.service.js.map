{"version":3,"sources":["item.service.ts"],"names":["core_1","require","http_1","Observable_1","ItemService","http","this","baseUrl","prototype","handleError","error","console","Observable","throw","json","getLatest","num","url","get","map","response","catch","getMostViewed","getRandom","id","Error","__decorate","Injectable","Http","exports"],"mappings":"8pBAAA,IAAAA,QAAAC,QAAA,iBACAC,OAAAD,QAAA,iBACAE,aAAAF,QAAA,kBAEAA,SAAA,UAGA,IAAaG,aAAW,WACpB,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,aA4CtB,MA1CYH,aAAAI,UAAAC,YAAR,SAAoBC,OAGhB,MADAC,SAAQD,MAAMA,OACPP,aAAAS,WAAWC,MAAMH,MAAMI,OAAOJ,OAAS,iBAElDN,YAAAI,UAAAO,UAAA,SAAUC,KACN,GAAIC,KAAMX,KAAKC,QAAU,YAIzB,OAHS,OAALS,MACAC,KAAOD,KAEJV,KAAKD,KAAKa,IAAID,KAChBE,IAAI,SAACC,UAAsB,MAAAA,UAASN,SACpCO,MAAMf,KAAKG,cAGpBL,YAAAI,UAAAc,cAAA,SAAcN,KACV,GAAIC,KAAMX,KAAKC,QAAU,gBAIzB,OAHW,OAAPS,MACAC,KAAOD,KAEJV,KAAKD,KAAKa,IAAID,KAChBE,IAAI,SAACC,UAAuB,MAAAA,UAASN,SACrCO,MAAMf,KAAKG,cAGpBL,YAAAI,UAAAe,UAAA,SAAUP,KACN,GAAIC,KAAMX,KAAKC,QAAU,YAIzB,OAHW,OAAPS,MACAC,KAAOD,KAEJV,KAAKD,KAAKa,IAAID,KAChBE,IAAI,SAACC,UAAuB,MAAAA,UAASN,SACrCO,MAAMf,KAAKG,cAGpBL,YAAAI,UAAAU,IAAA,SAAIM,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,cAClC,IAAMR,KAAMX,KAAKC,QAAUiB,EAC3B,OAAOlB,MAAKD,KAAKa,IAAID,KAChBE,IAAI,SAACC,UAAuB,MAAAA,UAASN,SACrCO,MAAMf,KAAKG,cAExBL,cA/CaA,aAAWsB,YADvB1B,OAAA2B,6CAE6BzB,OAAA0B,QADjBxB,aAAAyB,QAAAzB,YAAAA","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Item } from \"./item\";\r\nimport \"rxjs/Rx\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(private http: Http) { }\r\n\r\n    private baseUrl = \"api/items/\";\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n    getLatest(num?: number) {\r\n        let url = this.baseUrl + \"GetLatest/\";\r\n        if (num!=null) {\r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map((response:Response) => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getMostViewed(num?: number) {\r\n        let url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map((response: Response) => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getRandom(num?:number) {\r\n        let url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map((response: Response) => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    get(id: number) {\r\n        if (id == null) { throw new Error(\"Id required\") };\r\n        const url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map((response: Response) => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n}"]}